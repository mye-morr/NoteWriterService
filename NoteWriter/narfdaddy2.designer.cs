#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace NoteWriter
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="narfdaddy2")]
	public partial class narfdaddy2DataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertNoteWriterItem(NoteWriterItem instance);
    partial void UpdateNoteWriterItem(NoteWriterItem instance);
    partial void DeleteNoteWriterItem(NoteWriterItem instance);
    partial void InsertNoteWriterTip(NoteWriterTip instance);
    partial void UpdateNoteWriterTip(NoteWriterTip instance);
    partial void DeleteNoteWriterTip(NoteWriterTip instance);
    #endregion
		
		public narfdaddy2DataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["narfdaddy2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public narfdaddy2DataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public narfdaddy2DataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public narfdaddy2DataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public narfdaddy2DataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<NoteWriterItem> NoteWriterItems
		{
			get
			{
				return this.GetTable<NoteWriterItem>();
			}
		}
		
		public System.Data.Linq.Table<NoteWriterTip> NoteWriterTips
		{
			get
			{
				return this.GetTable<NoteWriterTip>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoteWriterItems")]
	public partial class NoteWriterItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _numRow;
		
		private string _usr;
		
		private string _cat;
		
		private string _subcat;
		
		private string _item;
		
		private string _dialog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumRowChanging(int value);
    partial void OnnumRowChanged();
    partial void OnusrChanging(string value);
    partial void OnusrChanged();
    partial void OncatChanging(string value);
    partial void OncatChanged();
    partial void OnsubcatChanging(string value);
    partial void OnsubcatChanged();
    partial void OnitemChanging(string value);
    partial void OnitemChanged();
    partial void OndialogChanging(string value);
    partial void OndialogChanged();
    #endregion
		
		public NoteWriterItem()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numRow", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int numRow
		{
			get
			{
				return this._numRow;
			}
			set
			{
				if ((this._numRow != value))
				{
					this.OnnumRowChanging(value);
					this.SendPropertyChanging();
					this._numRow = value;
					this.SendPropertyChanged("numRow");
					this.OnnumRowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usr", DbType="VarChar(50)")]
		public string usr
		{
			get
			{
				return this._usr;
			}
			set
			{
				if ((this._usr != value))
				{
					this.OnusrChanging(value);
					this.SendPropertyChanging();
					this._usr = value;
					this.SendPropertyChanged("usr");
					this.OnusrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat", DbType="VarChar(50)")]
		public string cat
		{
			get
			{
				return this._cat;
			}
			set
			{
				if ((this._cat != value))
				{
					this.OncatChanging(value);
					this.SendPropertyChanging();
					this._cat = value;
					this.SendPropertyChanged("cat");
					this.OncatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subcat", DbType="VarChar(50)")]
		public string subcat
		{
			get
			{
				return this._subcat;
			}
			set
			{
				if ((this._subcat != value))
				{
					this.OnsubcatChanging(value);
					this.SendPropertyChanging();
					this._subcat = value;
					this.SendPropertyChanged("subcat");
					this.OnsubcatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item", DbType="VarChar(50)")]
		public string item
		{
			get
			{
				return this._item;
			}
			set
			{
				if ((this._item != value))
				{
					this.OnitemChanging(value);
					this.SendPropertyChanging();
					this._item = value;
					this.SendPropertyChanged("item");
					this.OnitemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dialog", DbType="VarChar(MAX)")]
		public string dialog
		{
			get
			{
				return this._dialog;
			}
			set
			{
				if ((this._dialog != value))
				{
					this.OndialogChanging(value);
					this.SendPropertyChanging();
					this._dialog = value;
					this.SendPropertyChanged("dialog");
					this.OndialogChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.NoteWriterTips")]
	public partial class NoteWriterTip : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _numRow;
		
		private string _usr;
		
		private string _cat;
		
		private string _subcat;
		
		private string _item;
		
		private string _dialog;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnnumRowChanging(int value);
    partial void OnnumRowChanged();
    partial void OnusrChanging(string value);
    partial void OnusrChanged();
    partial void OncatChanging(string value);
    partial void OncatChanged();
    partial void OnsubcatChanging(string value);
    partial void OnsubcatChanged();
    partial void OnitemChanging(string value);
    partial void OnitemChanged();
    partial void OndialogChanging(string value);
    partial void OndialogChanged();
    #endregion
		
		public NoteWriterTip()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_numRow", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int numRow
		{
			get
			{
				return this._numRow;
			}
			set
			{
				if ((this._numRow != value))
				{
					this.OnnumRowChanging(value);
					this.SendPropertyChanging();
					this._numRow = value;
					this.SendPropertyChanged("numRow");
					this.OnnumRowChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_usr", DbType="VarChar(50)")]
		public string usr
		{
			get
			{
				return this._usr;
			}
			set
			{
				if ((this._usr != value))
				{
					this.OnusrChanging(value);
					this.SendPropertyChanging();
					this._usr = value;
					this.SendPropertyChanged("usr");
					this.OnusrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_cat", DbType="VarChar(50)")]
		public string cat
		{
			get
			{
				return this._cat;
			}
			set
			{
				if ((this._cat != value))
				{
					this.OncatChanging(value);
					this.SendPropertyChanging();
					this._cat = value;
					this.SendPropertyChanged("cat");
					this.OncatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_subcat", DbType="VarChar(50)")]
		public string subcat
		{
			get
			{
				return this._subcat;
			}
			set
			{
				if ((this._subcat != value))
				{
					this.OnsubcatChanging(value);
					this.SendPropertyChanging();
					this._subcat = value;
					this.SendPropertyChanged("subcat");
					this.OnsubcatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_item", DbType="VarChar(50)")]
		public string item
		{
			get
			{
				return this._item;
			}
			set
			{
				if ((this._item != value))
				{
					this.OnitemChanging(value);
					this.SendPropertyChanging();
					this._item = value;
					this.SendPropertyChanged("item");
					this.OnitemChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_dialog", DbType="VarChar(MAX)")]
		public string dialog
		{
			get
			{
				return this._dialog;
			}
			set
			{
				if ((this._dialog != value))
				{
					this.OndialogChanging(value);
					this.SendPropertyChanging();
					this._dialog = value;
					this.SendPropertyChanged("dialog");
					this.OndialogChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
